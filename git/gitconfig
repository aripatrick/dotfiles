[user]
	name = Ari Patrick
	email = ari.patrick@gmail.com

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = green
    changed = magenta
    untracked = bold yellow

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	editor = vim

	# Use custom `.gitignore`
	excludesfile = ~/.gitignore

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[push]
	default = simple

	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[merge]
	tool = vimdiff

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[diff]
	tool = vimdiff

	# Detect copies as well as renames
	renames = copies

[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Commit all changes
	ca = !git add -A && git commit -av

	# Amend the currently staged files to the latest commit
	amend = commit --amend

	# Show verbose output about tags, branches, or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
